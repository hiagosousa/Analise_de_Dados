warnings()
dados
#Questão 4:
mean(dados$V3)
## Questão 2 - Qualitativo: ID
## Quantitativo: Radius, Texture, Perimeter, Area, Smoothness, Compactness, Concavity, Concave Points, Symmetry, Fractal Dimension
install.packages("tibble")
clear
cls
apply(dados,2,mean)
dados
#Questão 4:
colMeans(dados)
#Questão 4:
colMeans(dados[,3:30])
#Questão 4:
colMeans(dados[,3:30],trim = 3)
#Questão 4:
colMeans(dados[,3:30],trim = 0.3)
#Questão 4:
format(scientific = FALSE)
#Questão 4:
format(dados, scientific = FALSE)
colMeans(dados[,3:30],trim = 0.3)
colMeans(dados[,3:30])
colMeans(dados[sapply(df,is.numeric),3:30])
colMeans(dados[sapply(df,is.numeric)])
colMeans(dados[scientific=FALSE,3:30])
colMeans(dados[(scientific=FALSE),3:30])
colMeans(dados[,3:30])
dados
format(x,scientific = FALSE)
x <- colMeans(dados[,3:30])
format(x,scientific = FALSE)
x <- colMeans(dados[,3:30])
format(x,scientific = FALSE)
x
dados
dados
format(x,scientific = FALSE)
format(x,scientific = FALSE)
dados
dados
colMedian(dados[,3:32])
median(dados[,3:32])
Summary(dados)
median(dados[,3])
median(dados[,3:5])
summary(dados)
ggplot(dados)
dados
ggplot(dados) + geom_point(aes(x = v2, y = v1))
install.packages("ggplot")
install.packages("ggplot2")
ggplot(dados) + geom_point(aes(x = v2, y = v1))
ggplot(dados) + geom_point(aes(x = v2, y = v1))
library(ggplot2)
ggplot(dados) + geom_point(aes(x = v2, y = v1))
dados <- read.csv(file, header = FALSE)
dados
x <- colMeans(dados[,3:32])
dados
ggplot(dados) + geom_point(aes(x = v2, y = v1))
format(x,scientific = FALSE)
median(dados[,3:5])
summary(dados)
names(dados)
names(dados)[names(dados)== "v1"] <- "ID"
names(dados)
names(dados)
names(dados)[names(dados)== "v1"] <- "ID"
names(dados)
install.packages("tidyverse")
library(tidyverse)
rename(dados, v1 = id)
rename(dados, id = v1)
rename(dados, id = v1)
dados
names(dados)
rename(dados, "id" = "v1")
rename(dados, "id" = "V1")
rename(dados, "id" = "V1")
rename(dados, id = "id")
rename(dados, id = id)
rename(dados, "id" = "id")
rename(dados, "id" = "id", Diagnostic = v2)
rename(dados, Diagnostic = v2)
rename(dados, Diagnostic = V2)
rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12)
rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12, radius2 = V13, texture2 = v14, perimeter2 = V15, area2 = V16, smoothness2 = V17, compactness2 = V18, concavity2 = V19, concave_points2 = V20, symmetry2 = V21, fractal_dimension2 = V22, radius3 = V23, texture3 = V24, perimeter3 = V25, area3 = V26, smoothness3 = V27, compactness3 = V28, concavity3 = V29, concave_points3 = V30, symmetry3 = V31, fractal_dimension3 = V32)
rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12, radius2 = V13, texture2 = V14, perimeter2 = V15, area2 = V16, smoothness2 = V17, compactness2 = V18, concavity2 = V19, concave_points2 = V20, symmetry2 = V21, fractal_dimension2 = V22, radius3 = V23, texture3 = V24, perimeter3 = V25, area3 = V26, smoothness3 = V27, compactness3 = V28, concavity3 = V29, concave_points3 = V30, symmetry3 = V31, fractal_dimension3 = V32)
database = rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12, radius2 = V13, texture2 = V14, perimeter2 = V15, area2 = V16, smoothness2 = V17, compactness2 = V18, concavity2 = V19, concave_points2 = V20, symmetry2 = V21, fractal_dimension2 = V22, radius3 = V23, texture3 = V24, perimeter3 = V25, area3 = V26, smoothness3 = V27, compactness3 = V28, concavity3 = V29, concave_points3 = V30, symmetry3 = V31, fractal_dimension3 = V32)
names(database)
database
ggplot(database) + geom_point(aes(x = radius1, y = ID))
ggplot(database) + geom_point(aes(x = area1, y = ID))
View(database)
ggplot(database) + geom_point(aes(x = area1, y = 1))
x
format(x,scientific = FALSE)
colMeans(database[,3:32])
x <- colMeans(database[,3:32])
format(x,scientific = FALSE)
format(x,scientific = FALSE)
#Questão 4:
#radius1:
ggplot(database) + geom_point(aes(x = radius1, y = 1))
ggplot(database) + geom_point(aes(x = texture1, y = 1))
ggplot(database) + geom_point(aes(x = perimeter1, y = 1))
ggplot(database) + geom_point(aes(x = area1, y = 1))
ggplot(database) + geom_point(aes(x = smoothness1, y = 1))
ggplot(database) + geom_point(aes(x = compactness1, y = 1))
ggplot(database) + geom_point(aes(x = concavity1, y = 1))
ggplot(database) + geom_point(aes(x = concave_points1, y = 1))
apply(database,2,median)
format(x,scientific = FALSE)
apply(database,2:3,median) #Mediana dos valores da base de dados (Valores mais precisos do que através da média)
median(database[,3:5])
median(database[,3])
median(database[,3,4,5])
median(database[,3,4])
median(database[,3])
summary(database)
ggplot(database) + geom_boxplot()
boxplot(database$radius1)
boxplot(database$radius1)
boxplot(database$texture1)
boxplot(database$perimeter1)
boxplot(database$area1)
boxplot(database$radius1, main = "Boxplot: radius1")
boxplot(database$fractal_dimension1, main = "Boxplot: fractal_dimension3")
boxplot(database$perimeter1, main = "Boxplot: perimeter3")
boxplot(database$area1, main = "Boxplot: area3")
boxplot(database$smoothness1, main = "Boxplot: smoothness3")
boxplot(database$compactness1, main = "Boxplot: compactness3")
boxplot(database$concavity1, main = "Boxplot: concavity3")
boxplot(database$concave_points1, main = "Boxplot: concave_points3")
boxplot(database$symmetry1, main = "Boxplot: symmetry3")
boxplot(database$fractal_dimension1, main = "Boxplot: fractal_dimension3")
boxplot(database$area1, main = "Boxplot: area1")
boxplot(database$area2, main = "Boxplot: area2")
boxplot(database$area3, main = "Boxplot: area3")
boxplot(database$texture1, main = "Boxplot: texture1")
boxplot(database$perimeter1, main = "Boxplot: perimeter1")
boxplot(database$area1, main = "Boxplot: area1")
boxplot(database$smoothness1, main = "Boxplot: smoothness1")
boxplot(database$smoothness1, main = "Boxplot: smoothness1")
boxplot(database$compactness1, main = "Boxplot: compactness1")
boxplot(database$concavity1, main = "Boxplot: concavity1")
boxplot(database$concave_points1, main = "Boxplot: concave_points1")
boxplot(database$symmetry1, main = "Boxplot: symmetry1")
boxplot(database$fractal_dimension1, main = "Boxplot: fractal_dimension1")
boxplot(database$radius1, main = "Boxplot: radius2")
boxplot(database$texture1, main = "Boxplot: texture2")
boxplot(database$perimeter1, main = "Boxplot: perimeter2")
boxplot(database$area2, main = "Boxplot: area2")
boxplot(database$smoothness2, main = "Boxplot: smoothness2")
boxplot(database$compactness2, main = "Boxplot: compactness2")
boxplot(database$concavity2, main = "Boxplot: concavity2")
boxplot(database$concave_points2, main = "Boxplot: concave_points2")
boxplot(database$symmetry2, main = "Boxplot: symmetry2")
boxplot(database$fractal_dimension2, main = "Boxplot: fractal_dimension2")
boxplot(database$radius3, main = "Boxplot: radius3")
boxplot(database$texture3, main = "Boxplot: texture3")
boxplot(database$perimeter3, main = "Boxplot: perimeter3")
boxplot(database$area3, main = "Boxplot: area3")
boxplot(database$smoothness3, main = "Boxplot: smoothness3")
boxplot(database$compactness3, main = "Boxplot: compactness3")
boxplot(database$concavity3, main = "Boxplot: concavity3")
boxplot(database$concave_points3, main = "Boxplot: concave_points3")
boxplot(database$symmetry3, main = "Boxplot: symmetry3")
boxplot(database$fractal_dimension3, main = "Boxplot: fractal_dimension3")
x <- colMeans(database[,3:32]) #Média dos valores da base de dados (Valor inflado por Outliers, melhor usar mediana)
format(x,scientific = FALSE)
apply(database,2,median) #Mediana dos valores da base de dados (Valores mais precisos do que através da média)
boxplot(database$radius1, main = "Boxplot: radius1")
boxplot(database$texture1, main = "Boxplot: texture1")
boxplot(database$perimeter1, main = "Boxplot: perimeter1")
boxplot(database$area1, main = "Boxplot: area1")
boxplot(database$smoothness1, main = "Boxplot: smoothness1")
boxplot(database$compactness1, main = "Boxplot: compactness1")
boxplot(database$concavity1, main = "Boxplot: concavity1")
boxplot(database$concave_points1, main = "Boxplot: concave_points1")
boxplot(database$symmetry1, main = "Boxplot: symmetry1")
boxplot(database$fractal_dimension1, main = "Boxplot: fractal_dimension1")
boxplot(database$radius1, main = "Boxplot: radius2")
boxplot(database$texture1, main = "Boxplot: texture2")
boxplot(database$perimeter1, main = "Boxplot: perimeter2")
boxplot(database$area2, main = "Boxplot: area2")
boxplot(database$smoothness2, main = "Boxplot: smoothness2")
boxplot(database$compactness2, main = "Boxplot: compactness2")
boxplot(database$concavity2, main = "Boxplot: concavity2")
boxplot(database$concave_points2, main = "Boxplot: concave_points2")
boxplot(database$symmetry2, main = "Boxplot: symmetry2")
boxplot(database$fractal_dimension2, main = "Boxplot: fractal_dimension2")
boxplot(database$radius3, main = "Boxplot: radius3")
boxplot(database$texture3, main = "Boxplot: texture3")
boxplot(database$perimeter3, main = "Boxplot: perimeter3")
boxplot(database$area3, main = "Boxplot: area3")
boxplot(database$smoothness3, main = "Boxplot: smoothness3")
boxplot(database$compactness3, main = "Boxplot: compactness3")
boxplot(database$concavity3, main = "Boxplot: concavity3")
boxplot(database$concave_points3, main = "Boxplot: concave_points3")
boxplot(database$symmetry3, main = "Boxplot: symmetry3")
boxplot(database$symmetry3, main = "Boxplot: symmetry3")
boxplot(database$fractal_dimension3, main = "Boxplot: fractal_dimension3")
summary(database)
median(database$concave_points3)
means(database$concave_points3)
Means(database$concave_points3)
mean(database$concave_points3)
names(database)
view(database)
var(database$radius1)
apply(database,2,var)
format(databaseVariance, scientific = FALSE)
databaseVariance <- apply(database,2,var)
format(databaseVariance, scientific = FALSE)
format(databaseVariance, scientific = FALSE, trim = 0.3)
format(databaseVariance, scientific = FALSE, trim = 3)
format(databaseVariance, scientific = FALSE, nsmall = 3)
format(databaseVariance, scientific = FALSE)
apply(database,2,median) #Mediana dos valores da base de dados
format(databaseMeans,scientific = FALSE)
databaseMeans <- colMeans(database[,3:32]) #Média dos valores da base de dados (Valor inflado por Outliers, melhor usar mediana)
databaseMeans
format(databaseVariance, scientific = FALSE)
round(databaseVariance, 3)
databaseVariance <- round(databaseVariance, 3)
apply(databaseVariance, scientific = FALSE)
apply(databaseVariance,2, scientific = FALSE)
databaseVariance <- apply(database,2,var)
databaseVariance <- apply(database,2,var)
apply(databaseVariance, 2, scientific = FALSE)
format(databaseVariance, 2, scientific = FALSE)
format(databaseVariance, 2, scientific = FALSE)
databaseVariance <- round(databaseVariance, 3)
format(databaseVariance, 2, scientific = FALSE)
databaseVariance <- round(databaseVariance, 5)
format(databaseVariance, 2, scientific = FALSE)
databaseVariance <- apply(database,2,var)
databaseVariance <- round(databaseVariance, 5)
format(databaseVariance, 2, scientific = FALSE)
median(database[,3])
apply(database,2,median) #Mediana dos valores da base de dados
databaseInterval <- matrix(NA, ncol = ncol(database) - 2, nrow = 1)
for (i in 3:ncol(database)) {
databaseInterval[1, i-2] <- diff(range(database[, i]))
}
intervalos
databaseInterval
interval()
barplot(databaseInterval, names.arg = colnames(database)[-c(1, 2)], main = "Intervalos das Colunas", xlab = "Colunas", ylab = "Intervalo")
barplot(databaseInterval, main = "Intervalos das Colunas", xlab = "Colunas", ylab = "Intervalo")
barplot(database$radius1, names.arg = colnames(database)[-c(1, 2)], main = "Intervalos das Colunas", xlab = "Colunas", ylab = "Intervalo")
barplot(database$radius1, main = "Intervalos das Colunas", xlab = "Colunas", ylab = "Intervalo")
hist(database$radius1)
hist(database$radius1, main = "Intervalo")
hist(database$radius1, main = "Intervalo", xlab = "Base de Dados", ylab = "Frequencia")
hist(database$radius1, main = "Intervalo", xlab = "radius1", ylab = "Frequencia")
hist(database$radius1, main = "Intervalo", xlab = "radius1", ylab = "Frequencia")
format(databaseMeans,scientific = FALSE)
hist(database$texture1, main = "Intervalo", xlab = "texture1", ylab = "Frequencia")
hist(database$perimeter1, main = "Intervalo", xlab = "perimeter1", ylab = "Frequencia")
hist(database$area1, main = "Intervalo", xlab = "area1", ylab = "Frequencia")
hist(database$smoothness1, main = "Intervalo", xlab = "smoothness1", ylab = "Frequencia")
hist(database$compactness1, main = "Intervalo", xlab = "compactness1", ylab = "Frequencia")
hist(database$concavity1, main = "Intervalo", xlab = "concavity1", ylab = "Frequencia")
hist(database$concave_points1, main = "Intervalo", xlab = "concave_points1", ylab = "Frequencia")
hist(database$symmetry1, main = "Intervalo", xlab = "symmetry1", ylab = "Frequencia")
hist(database$fractal_dimension1, main = "Intervalo", xlab = "fractal_dimension1", ylab = "Frequencia")
hist(database$radius2, main = "Intervalo", xlab = "radius2", ylab = "Frequencia")
hist(database$texture2, main = "Intervalo", xlab = "texture2", ylab = "Frequencia")
hist(database$perimeter2, main = "Intervalo", xlab = "perimeter2", ylab = "Frequencia")
hist(database$area2, main = "Intervalo", xlab = "area2", ylab = "Frequencia")
hist(database$smoothness2, main = "Intervalo", xlab = "smoothness2", ylab = "Frequencia")
hist(database$compactness2, main = "Intervalo", xlab = "compactness2", ylab = "Frequencia")
hist(database$concavity2, main = "Intervalo", xlab = "concavity2", ylab = "Frequencia")
hist(database$concave_points2, main = "Intervalo", xlab = "concave_points2", ylab = "Frequencia")
hist(database$symmetry2, main = "Intervalo", xlab = "symmetry2", ylab = "Frequencia")
hist(database$fractal_dimension2, main = "Intervalo", xlab = "fractal_dimension2", ylab = "Frequencia")
hist(database$radius3, main = "Intervalo", xlab = "radius3", ylab = "Frequencia")
hist(database$texture3, main = "Intervalo", xlab = "texture3", ylab = "Frequencia")
hist(database$perimeter3, main = "Intervalo", xlab = "perimeter3", ylab = "Frequencia")
hist(database$area3, main = "Intervalo", xlab = "area3", ylab = "Frequencia")
hist(database$smoothness3, main = "Intervalo", xlab = "smoothness3", ylab = "Frequencia")
hist(database$compactness3, main = "Intervalo", xlab = "compactness3", ylab = "Frequencia")
hist(database$concavity3, main = "Intervalo", xlab = "concavity3", ylab = "Frequencia")
hist(database$concave_points3, main = "Intervalo", xlab = "concave_points3", ylab = "Frequencia")
hist(database$symmetry3, main = "Intervalo", xlab = "symmetry3", ylab = "Frequencia")
hist(database$fractal_dimension3, main = "Intervalo", xlab = "fractal_dimension3", ylab = "Frequencia")
databaseVariance <- apply(database,2,var) #Cálculo da Variância da base de dados (ID Desprezível)
databaseVariance <- round(databaseVariance, 5)
format(databaseVariance, 2, scientific = FALSE)
hist(database$Diagnostic, main = "Intervalo", xlab = "Diagnostic", ylab = "Frequencia")
summary(database) #Medidas de localidade da base de dados
summary(database$Diagnostic)
dados <- read.csv(file, header = FALSE, stringsAsFactors = TRUE)
database = rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12, radius2 = V13, texture2 = V14, perimeter2 = V15, area2 = V16, smoothness2 = V17, compactness2 = V18, concavity2 = V19, concave_points2 = V20, symmetry2 = V21, fractal_dimension2 = V22, radius3 = V23, texture3 = V24, perimeter3 = V25, area3 = V26, smoothness3 = V27, compactness3 = V28, concavity3 = V29, concave_points3 = V30, symmetry3 = V31, fractal_dimension3 = V32)
view(database)
summary(database$Diagnostic)
names(database)
boxplot(database$radius1, main = "Boxplot: radius1")
boxplot(database$texture1, main = "Boxplot: texture1")
boxplot(database$perimeter1, main = "Boxplot: perimeter1")
boxplot(database$area1, main = "Boxplot: area1")
boxplot(database$smoothness1, main = "Boxplot: smoothness1")
boxplot(database$compactness1, main = "Boxplot: compactness1")
boxplot(database$concavity1, main = "Boxplot: concavity1")
boxplot(database$concave_points1, main = "Boxplot: concave_points1")
boxplot(database$symmetry1, main = "Boxplot: symmetry1")
boxplot(database$fractal_dimension1, main = "Boxplot: fractal_dimension1")
boxplot(database$radius1, main = "Boxplot: radius2")
boxplot(database$texture1, main = "Boxplot: texture2")
boxplot(database$perimeter1, main = "Boxplot: perimeter2")
boxplot(database$area2, main = "Boxplot: area2")
boxplot(database$smoothness2, main = "Boxplot: smoothness2")
boxplot(database$compactness2, main = "Boxplot: compactness2")
boxplot(database$concavity2, main = "Boxplot: concavity2")
boxplot(database$concave_points2, main = "Boxplot: concave_points2")
boxplot(database$symmetry2, main = "Boxplot: symmetry2")
boxplot(database$fractal_dimension2, main = "Boxplot: fractal_dimension2")
boxplot(database$radius3, main = "Boxplot: radius3")
boxplot(database$texture3, main = "Boxplot: texture3")
boxplot(database$perimeter3, main = "Boxplot: perimeter3")
boxplot(database$area3, main = "Boxplot: area3")
boxplot(database$smoothness3, main = "Boxplot: smoothness3")
boxplot(database$compactness3, main = "Boxplot: compactness3")
boxplot(database$concavity3, main = "Boxplot: concavity3")
boxplot(database$concave_points3, main = "Boxplot: concave_points3")
boxplot(database$symmetry3, main = "Boxplot: symmetry3")
boxplot(database$fractal_dimension3, main = "Boxplot: fractal_dimension3")
databaseMeans <- colMeans(database[,3:32]) #Média dos valores da base de dados (Valor inflado por Outliers, melhor usar mediana)
format(databaseMeans,scientific = FALSE)
mean(database$concave_points3) #Média de concave_points3
apply(database,2,median) #Mediana dos valores da base de dados
summary(database) #Medidas de localidade da base de dados
summary(database$Diagnostic) #Moda do Atributo Alvo
databaseInterval <- matrix(NA, ncol = ncol(database) - 2, nrow = 1) #Intervalo dos valores da base de dados
for (i in 3:ncol(database)) {
databaseInterval[1, i-2] <- diff(range(database[, i]))
}
databaseInterval
databaseInterval #Intervalo dos valores da base de dados
hist(database$radius1, main = "Intervalo", xlab = "radius1", ylab = "Frequencia")
hist(database$texture1, main = "Intervalo", xlab = "texture1", ylab = "Frequencia")
hist(database$perimeter1, main = "Intervalo", xlab = "perimeter1", ylab = "Frequencia")
hist(database$area1, main = "Intervalo", xlab = "area1", ylab = "Frequencia")
hist(database$smoothness1, main = "Intervalo", xlab = "smoothness1", ylab = "Frequencia")
hist(database$compactness1, main = "Intervalo", xlab = "compactness1", ylab = "Frequencia")
hist(database$concavity1, main = "Intervalo", xlab = "concavity1", ylab = "Frequencia")
hist(database$concave_points1, main = "Intervalo", xlab = "concave_points1", ylab = "Frequencia")
hist(database$symmetry1, main = "Intervalo", xlab = "symmetry1", ylab = "Frequencia")
hist(database$fractal_dimension1, main = "Intervalo", xlab = "fractal_dimension1", ylab = "Frequencia")
hist(database$radius2, main = "Intervalo", xlab = "radius2", ylab = "Frequencia")
hist(database$texture2, main = "Intervalo", xlab = "texture2", ylab = "Frequencia")
hist(database$perimeter2, main = "Intervalo", xlab = "perimeter2", ylab = "Frequencia")
hist(database$area2, main = "Intervalo", xlab = "area2", ylab = "Frequencia")
hist(database$smoothness2, main = "Intervalo", xlab = "smoothness2", ylab = "Frequencia")
hist(database$compactness2, main = "Intervalo", xlab = "compactness2", ylab = "Frequencia")
hist(database$concavity2, main = "Intervalo", xlab = "concavity2", ylab = "Frequencia")
hist(database$concave_points2, main = "Intervalo", xlab = "concave_points2", ylab = "Frequencia")
hist(database$symmetry2, main = "Intervalo", xlab = "symmetry2", ylab = "Frequencia")
hist(database$fractal_dimension2, main = "Intervalo", xlab = "fractal_dimension2", ylab = "Frequencia")
hist(database$radius3, main = "Intervalo", xlab = "radius3", ylab = "Frequencia")
hist(database$texture3, main = "Intervalo", xlab = "texture3", ylab = "Frequencia")
hist(database$perimeter3, main = "Intervalo", xlab = "perimeter3", ylab = "Frequencia")
hist(database$area3, main = "Intervalo", xlab = "area3", ylab = "Frequencia")
hist(database$smoothness3, main = "Intervalo", xlab = "smoothness3", ylab = "Frequencia")
hist(database$compactness3, main = "Intervalo", xlab = "compactness3", ylab = "Frequencia")
hist(database$concavity3, main = "Intervalo", xlab = "concavity3", ylab = "Frequencia")
hist(database$concave_points3, main = "Intervalo", xlab = "concave_points3", ylab = "Frequencia")
hist(database$symmetry3, main = "Intervalo", xlab = "symmetry3", ylab = "Frequencia")
hist(database$fractal_dimension3, main = "Intervalo", xlab = "fractal_dimension3", ylab = "Frequencia")
databaseVariance <- apply(database,2,var) #Cálculo da Variância da base de dados (ID Desprezível)
databaseVariance <- round(databaseVariance, 5)
format(databaseVariance, 2, scientific = FALSE)
sd(database$radius1)
databaseSd <- apply(database,2,sd)
databaseSd
format(databaseSd, scientific = FALSE)
benignantPercentage <- (357/569) * 100
malignantPercentage <- (212 / 569) * 100
format(malignantPercentage, trim = 3)
format(malignantPercentage, trim = 0.3)
malignantPercentage <- round((212 / 569) * 100),3)
malignantPercentage <- round((212 / 569) * 100,3)
format(malignantPercentage)
benignantPercentage <- round((357/569) * 100,3)
format(benignantPercentage)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
dados_amostra <- database %>% sample_frac(0.2) #Pela base estar balanceada, será distribuído 20% para teste, e 80% para treinamento
dados_treinamento <- anti_join(database, dados_amostra)
view(dados_amostra)
view(database)
database = rename(dados, ID = V1, Diagnostic = V2, radius1 = V3, texture1 = V4, perimeter1 = V5, area1 = V6, smoothness1 = V7, compactness1 = V8, concavity1 = V9, concave_points1 = V10, symmetry1 = V11, fractal_dimension1 = V12, radius2 = V13, texture2 = V14, perimeter2 = V15, area2 = V16, smoothness2 = V17, compactness2 = V18, concavity2 = V19, concave_points2 = V20, symmetry2 = V21, fractal_dimension2 = V22, radius3 = V23, texture3 = V24, perimeter3 = V25, area3 = V26, smoothness3 = V27, compactness3 = V28, concavity3 = V29, concave_points3 = V30, symmetry3 = V31, fractal_dimension3 = V32)
database
view(database)
names(database)
View(database)
View(dados_amostra)
summary(dados_amostra$Diagnostic)
summar(dados_treinamento$Diagnostic)
summary(dados_treinamento$Diagnostic)
#Questão 8
#O Atributo ID é desnecessário.
amostraSemID <- dados_amostra[,-c("ID")]
treinoSemID <- dados_treinamento[,-c("ID")]
#Questão 8
#O Atributo ID é desnecessário.
amostrasemID <- dados_amostra[, -which(names(dados_amostra) == "ID")]
View(amostrasemID)
#Questão 8
#O Atributo ID é desnecessário.
amostraSemID <- dados_amostra[, -which(names(dados_amostra) == "ID")]
treinoSemID <- dados_treinamento[, -which(names(dados_treinamento) == "ID")]
amostraSemOutliers <- amostraSemID[abs(scale(amostraSemID)) < limite_desvio_padrao, ]
amostraDadosNumericos <- base_dados[sapply(base_dados, is.numeric)]
amostraDadosNumericos <- amostrasemID[sapply(amostrasemID, is.numeric)]
View(amostraDadosNumericos)
# Selecionar apenas as colunas numéricas
amostraDadosNumericos <- amostraSemID[, sapply(amostraSemID, is.numeric)]
# Identificar linhas com outliers nas colunas numéricas
linhasComOutliers <- apply(amostraDadosNumericos, 1, function(x) any(abs((x - media) / desvio_padrao) > limiteDesvioPadrao))
# Selecionar apenas as colunas numéricas
amostraDadosNumericos <- amostraSemID[, sapply(amostraSemID, is.numeric)]
# Calcular a média e o desvio padrão para cada coluna numérica
media <- colMeans(amostraDadosNumericos, na.rm = TRUE)
desvio_padrao <- apply(amostraDadosNumericos, 2, sd, na.rm = TRUE)
# Definir limite para remoção de outliers (por exemplo, 3 desvios padrão)
limiteDesvioPadrao <- 3
# Identificar linhas com outliers nas colunas numéricas
linhasComOutliers <- apply(amostraDadosNumericos, 1, function(x) any(abs((x - media) / desvio_padrao) > limiteDesvioPadrao))
# Filtrar a base de dados mantendo apenas as linhas sem outliers
base_dados_sem_outliers <- base_dados[!linhas_outliers, ]
# Filtrar a base de dados mantendo apenas as linhas sem outliers
amostraSemOutliers <- amostraDadosNumericos[!linhasComOutliers, ]
View(amostraSemOutliers)
# Filtrar a base de dados mantendo apenas as linhas sem outliers
amostraSemOutliers <- amostraSemID[!linhasComOutliers, ]
View(amostraSemOutliers)
# Selecionar apenas as colunas numéricas
amostraDadosNumericos <- amostraSemID[, sapply(amostraSemID, is.numeric)]
# Calcular a média e o desvio padrão para cada coluna numérica
amostraMedia <- colMeans(amostraDadosNumericos, na.rm = TRUE)
desvio_padrao <- apply(amostraDadosNumericos, 2, sd, na.rm = TRUE)
# Definir limite para remoção de outliers
limiteDesvioPadrao <- 3
# Identificar linhas com outliers nas colunas numéricas
amostraLinhasComOutliers <- apply(amostraDadosNumericos, 1, function(x) any(abs((x - amostraMedia) / desvio_padrao) > limiteDesvioPadrao))
# Filtrar a base de dados mantendo apenas as linhas sem outliers
amostraSemOutliers <- amostraSemID[!linhasComOutliers, ]
testeDadosNumericos <- testeSemID[, sapply(testeSemID, is.numeric)]
amostraDadosNumericos = unique(amostraDadosNumericos) #Remoção de possíveis dados duplicados:
# Selecionar apenas as colunas numéricas
amostraDadosNumericos <- amostraSemID[, sapply(amostraSemID, is.numeric)]
# Calcular a média e o desvio padrão para cada coluna numérica
amostraMedia <- colMeans(amostraDadosNumericos, na.rm = TRUE)
desvio_padrao <- apply(amostraDadosNumericos, 2, sd, na.rm = TRUE)
# Definir limite para remoção de outliers
limiteDesvioPadrao <- 3
# Identificar linhas com outliers nas colunas numéricas
amostraLinhasComOutliers <- apply(amostraDadosNumericos, 1, function(x) any(abs((x - amostraMedia) / desvio_padrao) > limiteDesvioPadrao))
# Filtrar a base de dados mantendo apenas as linhas sem outliers
amostraSemOutliers <- amostraSemID[!linhasComOutliers, ]
testeDadosNumericos <- testeSemID[, sapply(testeSemID, is.numeric)]
testeDadosNumericos <- treinoSemID[, sapply(treinoSemID, is.numeric)]
treinoMedia <- colMeans(treinoDadosNumericos, na.rm = TRUE)
# Identificar linhas com outliers nas colunas numéricas
amostraLinhasComOutliers <- apply(amostraDadosNumericos, 1, function(x) any(abs((x - amostraMedia) / desvio_padrao) > limiteDesvioPadrao))
# Filtrar a base de dados mantendo apenas as linhas sem outliers
amostraSemOutliers <- amostraSemID[!linhasComOutliers, ]
treinoDadosNumericos <- treinoSemID[, sapply(treinoSemID, is.numeric)]
treinoMedia <- colMeans(treinoDadosNumericos, na.rm = TRUE)
treinoDesvioPadrao <- apply(treinoDadosNumericos, 2, sd, na.rm = TRUE)
treinoLinhasComOutliers <- apply(treinoDadosNumericos, 1, function(x) any(abs((x - media) / treinoDesvioPadrao) > limiteDesvioPadrao))
treinoSemOutliers <- treinoSemID[!treinoLinhasComOutliers, ]
View(treinoSemOutliers)
# Aplicar a PCA na base de dados padronizada
amostraPcaAplicado <- prcomp(amostraSemOutliers, scale = TRUE)
#Questão 13
amostraSemOutliers$Diagnostic <- ifelse(amostraSemOutliers$Diagnostic == "M", 1, 0) #Os valores de saída podem ser alterados de simbólico para numérico.
View(amostraSemOutliers)
treinoSemOutliers$Diagnostic <- ifelse(treinoSemOutliers$Diagnostic == "M", 1, 0)
# Aplicar a PCA na base de dados padronizada
amostraPcaAplicado <- prcomp(amostraSemOutliers, scale = TRUE)
# Verificar a proporção da variância explicada por cada componente
amostraProporcaoVariancia <- amostraPcaAplicado$sdev^2 / sum(amostraPcaAplicado$sdev^2)
# Plotar o gráfico de variância explicada acumulada
plot(cumsum(amostraProporcaoVariancia), xlab = "Número de Componentes", ylab = "Variância Explicada Acumulada", type = "b")
# Determinar o número de componentes a serem retidos com base na variância explicada acumulada
amostraNumComponentes <- which(cumsum(amostraProporcaoVariancia) >= 0.95)[1]
# Extrair os componentes principais
amostraCompPrincipais <- amostraPcaAplicado$x[, 1:amostraNumComponentes]
View(amostraCompPrincipais)
summary(amostraCompPrincipais)
amostraDadosNumericos = unique(amostraDadosNumericos) #Remoção de possíveis dados duplicados:
# Aplicar a PCA na base de dados padronizada
treinoPcaAplicado <- prcomp(treinoSemOutliers, scale = TRUE)
# Verificar a proporção da variância explicada por cada componente
treinoProporcaoVariancia <- treinoPcaAplicado$sdev^2 / sum(treinoPcaAplicado$sdev^2)
# Plotar o gráfico de variância explicada acumulada
plot(cumsum(treinoProporcaoVariancia), xlab = "Número de Componentes (Treino)", ylab = "Variância Explicada Acumulada (Treino)", type = "b")
# Determinar o número de componentes a serem retidos com base na variância explicada acumulada
treinoNumComponentes <- which(cumsum(treinoProporcaoVariancia) >= 0.95)[1]
# Extrair os componentes principais
treinoCompPrincipais <- treinoPcaAplicado$x[, 1:treinoNumComponentes]
summary(treinoCompPrincipais)
View(treinoCompPrincipais)
